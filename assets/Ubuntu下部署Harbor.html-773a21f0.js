import{_ as r,r as t,o as i,c as l,a as n,b as s,d as e,e as o}from"./app-2ff14493.js";const c={},p=o(`<h1 id="ubuntu部署harbor" tabindex="-1"><a class="header-anchor" href="#ubuntu部署harbor" aria-hidden="true">#</a> Ubuntu部署Harbor</h1><blockquote><p>Docker容器应用的开发和运行路不开可靠的镜像管理，虽然Docker官方也提供了公共的镜像仓库，但是从安全和效率等方面考虑，部署我们私有环境的Registry也是非常必要的。 Harbor是由VMware公司开源的企业级的Docker Registry管理项目，它包括权限管理(RBAC)、LDAP、日志审核、管理界面、自我注册、镜像复制和中文支持等功能。</p></blockquote><h2 id="首先" tabindex="-1"><a class="header-anchor" href="#首先" aria-hidden="true">#</a> 首先</h2><p>配置hosts文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /etc/hosts
添加
<span class="token number">127.0</span>.1.1  harbor 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="harbor-部署" tabindex="-1"><a class="header-anchor" href="#harbor-部署" aria-hidden="true">#</a> Harbor 部署</h2>`,6),d=n("li",null,"首先我们在服务器上安装好操作系统（或有操作系统），并安装好 docker 引擎和 docker-compose.",-1),u=n("li",null,"docker-compose 需要安装新版的 V2.",-1),h={href:"https://docs.docker.com/engine/install/ubuntu",target:"_blank",rel:"noopener noreferrer"},b={href:"https://docs.docker.com/compose/install/linux",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/goharbor/harbor/releases",target:"_blank",rel:"noopener noreferrer"},v=o(`<li>GitHub 的安装包分为在<strong>线安装</strong>和<strong>离线安装</strong>两种,可以根据自己的网络情况选择适合自己的包即可.<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">wget</span> https://github.com/goharbor/harbor/releases/download/v2.9.2/harbor-offline-installer-v2.9.2.tgz
解压下载的包
<span class="token function">sudo</span> <span class="token function">tar</span> xzvf harbor-offline-installer-v2.9.2.tgz 
解压后当前命令符目录下应该会多出来一个 harbor 文件夹
<span class="token builtin class-name">cd</span> harbor 
拷贝配置文件
<span class="token function">sudo</span> <span class="token function">cp</span> /home/ubuntu/harbor.yml.tmpl /home/ubuntu/harbor/harbor.yml
设置文件权限
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> harbor.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>修改配置文件<strong>harbor.yml</strong></li>`,2),k=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /root/harbor/harbor.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>修下内容以下</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>我使用是http的，没有使用https，根据自身需要
<span class="token comment"># hostname直接填写为本机的主机名就行,如我这里就叫harbor</span>
<span class="token key atrule">hostname</span><span class="token punctuation">:</span> harbor
<span class="token comment"># http我这里没有使用,所以注释掉了.</span>
<span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8088</span>
<span class="token comment"># https配置</span>
<span class="token comment">#https:</span>
  <span class="token comment"># https port for harbor, default is 443</span>
  <span class="token comment">#port: 443</span>
  <span class="token comment"># 这里写入证书的路径,需要先将域名服务商颁发的证书复制到对应目录,若是没有证书,可以仅使用http.</span>
  <span class="token comment">#certificate: /home/ubuntu/harbor/xx.csr</span>
  <span class="token comment">#private_key: /home/ubuntu/harbor/x.csr</span>
  
以下该文件内容自行修改
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),g=n("p",null,"Https配置以下：",-1),f={href:"https://goharbor.io/docs/2.10.0/install-config/configure-https",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,[n("p",null,[s("配置文件"),n("strong",null,"harbor.yml"),s("调整后，执行以下安装命令")])],-1),_=o(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 后边的--with-trivy是添加了一个扫描器,用来扫描镜像漏洞的.若是不需要可以不加.也可以后期再执行这个命令添加上去.</span>
<span class="token function">sudo</span> ./install.sh --with-trivy
等待一段时间,就可以部署成功了
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意： 部署过程中有可能出现等待非常长时候还没有部署成功，就需要执行以下操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker</span> image <span class="token function">import</span> ./harbor.v2.9.2.tar.gz
再次执行以下命令
<span class="token function">sudo</span> ./install.sh --with-trivy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>安装完harbor后验证</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ubuntu@VM-12-9-ubuntu:~/harbor$ <span class="token function">docker</span> <span class="token function">ps</span> 
CONTAINER ID   IMAGE                                                COMMAND                  CREATED        STATUS                            PORTS                                                                                           NAMES
ad736922a8f9   goharbor/nginx-photon:v2.9.2                         <span class="token string">&quot;nginx -g &#39;daemon of…&quot;</span>   <span class="token number">23</span> hours ago   Up <span class="token number">23</span> hours <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>             <span class="token number">0.0</span>.0.0:8088-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp, :::8088-<span class="token operator">&gt;</span><span class="token number">8080</span>/tcp                                                       nginx
57123351b966   goharbor/harbor-jobservice:v2.9.2                    <span class="token string">&quot;/harbor/entrypoint.…&quot;</span>   <span class="token number">23</span> hours ago   Up <span class="token number">23</span> hours <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                                             harbor-jobservice
738ed3112c98   goharbor/harbor-core:v2.9.2                          <span class="token string">&quot;/harbor/entrypoint.…&quot;</span>   <span class="token number">23</span> hours ago   Up <span class="token number">23</span> hours <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                                             harbor-core
6f90a32727b2   goharbor/trivy-adapter-photon:v2.9.2                 <span class="token string">&quot;/home/scanner/entry…&quot;</span>   <span class="token number">23</span> hours ago   Up <span class="token number">23</span> hours <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                                             trivy-adapter
c28b438e9f26   goharbor/redis-photon:v2.9.2                         <span class="token string">&quot;redis-server /etc/r…&quot;</span>   <span class="token number">23</span> hours ago   Up <span class="token number">23</span> hours <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                                             redis
5038746da448   goharbor/harbor-portal:v2.9.2                        <span class="token string">&quot;nginx -g &#39;daemon of…&quot;</span>   <span class="token number">23</span> hours ago   Up <span class="token number">23</span> hours <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                                             harbor-portal
25a52f6d9893   goharbor/harbor-registryctl:v2.9.2                   <span class="token string">&quot;/home/harbor/start.…&quot;</span>   <span class="token number">23</span> hours ago   Up <span class="token number">23</span> hours <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                                             registryctl
61b6180de85f   goharbor/harbor-db:v2.9.2                            <span class="token string">&quot;/docker-entrypoint.…&quot;</span>   <span class="token number">23</span> hours ago   Up <span class="token number">23</span> hours <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                                             harbor-db
9388c40ee0d4   goharbor/registry-photon:v2.9.2                      <span class="token string">&quot;/home/harbor/entryp…&quot;</span>   <span class="token number">23</span> hours ago   Up <span class="token number">23</span> hours <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>                                                                                                             registry
59ed94536a3c   goharbor/harbor-log:v2.9.2                           <span class="token string">&quot;/bin/sh -c /usr/loc…&quot;</span>   <span class="token number">23</span> hours ago   Up <span class="token number">23</span> hours <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>             <span class="token number">127.0</span>.0.1:1514-<span class="token operator">&gt;</span><span class="token number">10514</span>/tcp                                                                       harbor-log

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可使用http://[ip]:[port]访问 然后输入账号与密码登录及可 账号为admin 密码是默认的，请看配置文件</p><h2 id="登录仓库" tabindex="-1"><a class="header-anchor" href="#登录仓库" aria-hidden="true">#</a> 登录仓库</h2><p>最好使用https登录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 语法: docker login [OPTIONS] [SERVER]</span>
<span class="token comment"># 请将域名替换为自己的.</span>
<span class="token comment"># 账号为admin</span>
<span class="token comment"># 密码Harbor12345</span>
<span class="token function">docker</span> login xxxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h3><p>有可能没有使用域名只使用IP地址访问。</p><p><code>Error response from daemon: Get &quot;https://xxxx:8088/v2/&quot;: http: server gave HTTP response to HTTPS client</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /etc/docker/daemon.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在文件中添加所需的配置。例如，要配置Docker以允许通过HTTP连接到某个非安全的Registry，可以添加如下内容：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;insecure-registries&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://xxxx:443&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;http://xxx.8088&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重启docker服务" tabindex="-1"><a class="header-anchor" href="#重启docker服务" aria-hidden="true">#</a> 重启Docker服务</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl daemon-reload
<span class="token comment">#sudo systemctl restart docker.service</span>
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="验证配置" tabindex="-1"><a class="header-anchor" href="#验证配置" aria-hidden="true">#</a> 验证配置</h4><p>重启Docker服务后，可以通过检查Docker的状态和日志来验证配置是否生效：</p><ul><li>检查Docker服务状态：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl status <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查看Docker日志，寻找有关启动或配置错误的信息：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>journalctl <span class="token parameter variable">-u</span> docker.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>确保没有错误消息，并且Docker守护进程正常运行。如果出现问题，检查daemon.json中的配置是否正确，并确认没有语法错误。</p><h2 id="退出仓库" tabindex="-1"><a class="header-anchor" href="#退出仓库" aria-hidden="true">#</a> 退出仓库</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#语法: docker logout [SERVER]</span>
<span class="token function">docker</span> <span class="token builtin class-name">logout</span> xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,27),y={href:"https://github.com/EasilyNET/docs/blob/main/Harbor/harbor%E9%83%A8%E7%BD%B2.md?plain=1#L148",target:"_blank",rel:"noopener noreferrer"},q={href:"https://segmentfault.com/a/1190000043223828",target:"_blank",rel:"noopener noreferrer"};function D(E,H){const a=t("ExternalLinkIcon");return i(),l("div",null,[p,n("ul",null,[d,u,n("li",null,[s("至于 "),n("a",h,[s("Docker Engine"),e(a)]),s(" 和 "),n("a",b,[s("Docker Compose"),e(a)]),s(" 的配置可以参考 docker 官网,这里不再赘述.参考链接如下:")]),n("li",null,[s("首先在官网点击"),n("a",m,[s("Download Now"),e(a)]),s("会跳转到 GitHub 的 Release,选择自己喜欢的版本下载就行.本文以 v2.9.2 版本为例.")]),v]),k,n("ul",null,[n("li",null,[g,n("p",null,[n("a",f,[s("有详细教程"),e(a)])])]),x]),_,n("p",null,[n("a",y,[s("Ubuntu 系统 Harbor 部署"),e(a)])]),n("p",null,[n("a",q,[s("Harbor私有仓库搭建并配置https对接docker与kubernetes"),e(a)])])])}const T=r(c,[["render",D],["__file","Ubuntu下部署Harbor.html.vue"]]);export{T as default};
