const e=JSON.parse('{"key":"v-8565bc54","path":"/dotnet/design-pattern.html","title":"设计模式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"设计原则","slug":"设计原则","link":"#设计原则","children":[{"level":3,"title":"单一职责原则SRP(Single Responsibilities Principle)","slug":"单一职责原则srp-single-responsibilities-principle","link":"#单一职责原则srp-single-responsibilities-principle","children":[]},{"level":3,"title":"开闭原则OCP（Open Close Principle）","slug":"开闭原则ocp-open-close-principle","link":"#开闭原则ocp-open-close-principle","children":[]},{"level":3,"title":"依赖倒置原则DIP（Dependence Inversion Principle）","slug":"依赖倒置原则dip-dependence-inversion-principle","link":"#依赖倒置原则dip-dependence-inversion-principle","children":[]},{"level":3,"title":"里氏代换原则LSP（Liskov Substitution Principle）","slug":"里氏代换原则lsp-liskov-substitution-principle","link":"#里氏代换原则lsp-liskov-substitution-principle","children":[]},{"level":3,"title":"接口隔离原则ISP（Interface Segregation Principle）","slug":"接口隔离原则isp-interface-segregation-principle","link":"#接口隔离原则isp-interface-segregation-principle","children":[]},{"level":3,"title":"迪米特原则，又称最少知道原则DP（Demeter Principle）","slug":"迪米特原则-又称最少知道原则dp-demeter-principle","link":"#迪米特原则-又称最少知道原则dp-demeter-principle","children":[]},{"level":3,"title":"合成复用原则CRP（Composite Reuse Principle）","slug":"合成复用原则crp-composite-reuse-principle","link":"#合成复用原则crp-composite-reuse-principle","children":[]}]},{"level":2,"title":"UML图","slug":"uml图","link":"#uml图","children":[]},{"level":2,"title":"设计模式的类型","slug":"设计模式的类型","link":"#设计模式的类型","children":[]},{"level":2,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[{"level":3,"title":"单例模式（Singleton Pattern）","slug":"单例模式-singleton-pattern","link":"#单例模式-singleton-pattern","children":[]},{"level":3,"title":"简单工厂模式（Factory Pattern）","slug":"简单工厂模式-factory-pattern","link":"#简单工厂模式-factory-pattern","children":[]},{"level":3,"title":"工厂方法模式（Factory Method）","slug":"工厂方法模式-factory-method","link":"#工厂方法模式-factory-method","children":[]},{"level":3,"title":"抽象工厂模式（Abstract Factory Pattern）","slug":"抽象工厂模式-abstract-factory-pattern","link":"#抽象工厂模式-abstract-factory-pattern","children":[]},{"level":3,"title":"建造者模式（Builder Pattern）","slug":"建造者模式-builder-pattern","link":"#建造者模式-builder-pattern","children":[]},{"level":3,"title":"原型模式（Prototype Pattern）","slug":"原型模式-prototype-pattern","link":"#原型模式-prototype-pattern","children":[]}]},{"level":2,"title":"结构型模式","slug":"结构型模式","link":"#结构型模式","children":[{"level":3,"title":"适配器模式（Adapter Pattern）","slug":"适配器模式-adapter-pattern","link":"#适配器模式-adapter-pattern","children":[]},{"level":3,"title":"装饰器模式（Decorator Pattern）","slug":"装饰器模式-decorator-pattern","link":"#装饰器模式-decorator-pattern","children":[]},{"level":3,"title":"代理模式（Proxy Pattern）","slug":"代理模式-proxy-pattern","link":"#代理模式-proxy-pattern","children":[]},{"level":3,"title":"外观模式（Facade Pattern）","slug":"外观模式-facade-pattern","link":"#外观模式-facade-pattern","children":[]},{"level":3,"title":"桥接模式（Bridge Pattern）","slug":"桥接模式-bridge-pattern","link":"#桥接模式-bridge-pattern","children":[]},{"level":3,"title":"组合模式（Composite Pattern）","slug":"组合模式-composite-pattern","link":"#组合模式-composite-pattern","children":[]},{"level":3,"title":"享元模式（Flyweight Pattern）","slug":"享元模式-flyweight-pattern","link":"#享元模式-flyweight-pattern","children":[]}]},{"level":2,"title":"行为型模式","slug":"行为型模式","link":"#行为型模式","children":[{"level":3,"title":"中介者模式（Mediator Pattern）","slug":"中介者模式-mediator-pattern","link":"#中介者模式-mediator-pattern","children":[]},{"level":3,"title":"观察者模式（Observer Pattern）","slug":"观察者模式-observer-pattern","link":"#观察者模式-observer-pattern","children":[]},{"level":3,"title":"迭代器模式（Iterator Pattern）","slug":"迭代器模式-iterator-pattern","link":"#迭代器模式-iterator-pattern","children":[]},{"level":3,"title":"访问者模式（Visitor Pattern）","slug":"访问者模式-visitor-pattern","link":"#访问者模式-visitor-pattern","children":[]},{"level":3,"title":"责任链模式（Chain of Responsibility Pattern）","slug":"责任链模式-chain-of-responsibility-pattern","link":"#责任链模式-chain-of-responsibility-pattern","children":[]},{"level":3,"title":"策略模式（Strategy Pattern）","slug":"策略模式-strategy-pattern","link":"#策略模式-strategy-pattern","children":[]},{"level":3,"title":"命令模式（Command Pattern）","slug":"命令模式-command-pattern","link":"#命令模式-command-pattern","children":[]},{"level":3,"title":"备忘录模式（Memento Pattern）","slug":"备忘录模式-memento-pattern","link":"#备忘录模式-memento-pattern","children":[]},{"level":3,"title":"状态模式（State Pattern）","slug":"状态模式-state-pattern","link":"#状态模式-state-pattern","children":[]},{"level":3,"title":"模板方法模式（Template Method Pattern）","slug":"模板方法模式-template-method-pattern","link":"#模板方法模式-template-method-pattern","children":[]},{"level":3,"title":"解释器模式（Interpreter Pattern）","slug":"解释器模式-interpreter-pattern","link":"#解释器模式-interpreter-pattern","children":[]}]},{"level":2,"title":"特殊","slug":"特殊","link":"#特殊","children":[{"level":3,"title":"空对象模式（Null Object Pattern）","slug":"空对象模式-null-object-pattern","link":"#空对象模式-null-object-pattern","children":[]}]}],"git":{"updatedTime":1705478381000,"contributors":[{"name":"dong","email":"44517714+lurudong@users.noreply.github.com","commits":6}]},"filePathRelative":"dotnet/design-pattern.md"}');export{e as data};
