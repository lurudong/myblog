import{_ as c,r as i,o as r,c as d,a as e,b as s,d as a,e as o}from"./app-2ff14493.js";const t={},l=o('<h1 id="ubuntu下安装docker" tabindex="-1"><a class="header-anchor" href="#ubuntu下安装docker" aria-hidden="true">#</a> Ubuntu下安装Docker</h1><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h2><h3 id="系统" tabindex="-1"><a class="header-anchor" href="#系统" aria-hidden="true">#</a> 系统</h3>',3),p={href:"https://ubuntu.com/server",target:"_blank",rel:"noopener noreferrer"},u=o(`<p>假如使用云服务就不能自行下载。</p><p>Docker 可以安装在 64 位的 x86 平台或 ARM 平台上。Ubuntu 发行版中，LTS（Long-Term-Support）长期支持版本，会获得 5 年的升级维护支持，这样的版本会更稳定，因此在生产环境中推荐使用 LTS 版本。</p><p><code>选自己所喜欢的版本，选错的大不了重选。当你没有选到合适的版本的话，就撮合用吧。人生就是这样，不一定所选都是对的，假如不选，就错过，就不一定有对的时候，错了大不了重选。</code></p><h2 id="手动安装" tabindex="-1"><a class="header-anchor" href="#手动安装" aria-hidden="true">#</a> 手动安装</h2><h3 id="卸载旧版本" tabindex="-1"><a class="header-anchor" href="#卸载旧版本" aria-hidden="true">#</a> 卸载旧版本</h3><p>旧版本的 Docker 称为 <code>docker</code> 或者 <code>docker-engine</code>，使用以下命令卸载旧版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
               docker-engine <span class="token punctuation">\\</span>
               docker.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-apt-安装" tabindex="-1"><a class="header-anchor" href="#使用-apt-安装" aria-hidden="true">#</a> 使用 APT 安装</h3><p>由于 <code>apt</code> 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> update



<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\\</span>

​    apt-transport-https <span class="token punctuation">\\</span>

​    ca-certificates <span class="token punctuation">\\</span>

​    <span class="token function">curl</span> <span class="token punctuation">\\</span>

​    gnupg <span class="token punctuation">\\</span>

​    lsb-release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。</p><p>为了确认所下载软件包的合法性，需要添加软件源的 <code>GPG</code> 密钥。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg

<span class="token comment"># 官方源</span>

<span class="token comment">#  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们需要向 <code>sources.list</code> 中添加 Docker 软件源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token punctuation">\\</span>
  <span class="token string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \\
  <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">&gt;</span> /dev/null


<span class="token comment"># 官方源</span>
<span class="token comment"># echo \\</span>
<span class="token comment">#   &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\</span>
<span class="token comment">#   $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>以上命令会添加稳定版本的 Docker APT 镜像源，如果需要测试版本的 Docker 请将 stable 改为 test。</strong></p></blockquote><h3 id="安装-docker" tabindex="-1"><a class="header-anchor" href="#安装-docker" aria-hidden="true">#</a> 安装 Docker</h3><p>更新 apt 软件包缓存，并安装 <code>docker-ce</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> update

<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动-docker" tabindex="-1"><a class="header-anchor" href="#启动-docker" aria-hidden="true">#</a> 启动 Docker</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span>
<span class="token function">sudo</span> systemctl start <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="建立-docker-用户组" tabindex="-1"><a class="header-anchor" href="#建立-docker-用户组" aria-hidden="true">#</a> 建立 docker 用户组</h3>`,22),b=e("code",null,"docker",-1),v={href:"https://en.wikipedia.org/wiki/Unix_domain_socket",target:"_blank",rel:"noopener noreferrer"},k=e("code",null,"root",-1),m=e("code",null,"docker",-1),h=e("code",null,"root",-1),g=e("code",null,"docker",-1),f=e("code",null,"docker",-1),_=o(`<p>建立 <code>docker</code> 组：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将当前用户加入 <code>docker</code> 组：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token environment constant">$USER</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>退出当前终端并重新登录，进行如下测试。</p><h3 id="卸载-docker" tabindex="-1"><a class="header-anchor" href="#卸载-docker" aria-hidden="true">#</a> 卸载 docker</h3><p>删除安装包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> purge docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除镜像、容器、配置文件等内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="镜像加速" tabindex="-1"><a class="header-anchor" href="#镜像加速" aria-hidden="true">#</a> 镜像加速</h2><p>参考文档：</p>`,12),x={href:"https://www.runoob.com/docker/docker-mirror-acceleration.html",target:"_blank",rel:"noopener noreferrer"},q=o(`<h4 id="ubuntu16-04-、debian8-、centos7" tabindex="-1"><a class="header-anchor" href="#ubuntu16-04-、debian8-、centos7" aria-hidden="true">#</a> Ubuntu16.04+、Debian8+、CentOS7</h4><p>对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;https://hub-mirror.c.163.com&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;https://mirror.baidubce.com&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意，一定要保证该文件符合 json 规范，否则 Docker 将不能启动。</p><p>选自己所喜欢的镜像，选错的算你自己。</p></blockquote><p>之后重新启动服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl daemon-reload

<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="检查加速器是否生效" tabindex="-1"><a class="header-anchor" href="#检查加速器是否生效" aria-hidden="true">#</a> 检查加速器是否生效</h4><p>执行 <code>$ docker info</code>，如果从结果中看到了如下内容，说明配置成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Registry Mirrors:
https://hub-mirror.c.163.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="不再提供服务的镜像" tabindex="-1"><a class="header-anchor" href="#不再提供服务的镜像" aria-hidden="true">#</a> 不再提供服务的镜像</h4><p>某些镜像不再提供服务，添加无用的镜像加速器，会拖慢镜像拉取速度，你可以从镜像配置列表中删除它们。</p><ul><li>https://dockerhub.azk8s.cn <strong>已转为私有</strong></li><li>https://reg-mirror.qiniu.com</li><li>https://registry.docker-cn.com</li></ul>`,12),y=e("strong",null,"watch（页面右上角）",-1),D={href:"https://github.com/docker-practice/docker-registry-cn-mirror-test",target:"_blank",rel:"noopener noreferrer"},w=e("p",null,"这些镜像服务商给钱你，才考虑一下。",-1),L=e("h2",{id:"安装docker-compose",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装docker-compose","aria-hidden":"true"},"#"),s(" 安装Docker Compose")],-1),S={href:"https://github.com/docker/compose/releases",target:"_blank",rel:"noopener noreferrer"},U=o(`<p>1.运行以下命令以下载 Docker Compose 的当前稳定版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose

或者

<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">&quot;https://github.com/docker/compose/releases/latest/download/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>&quot;</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要安装其他版本的 Compose，请替换 v2.2.2。</p><p>Docker Compose 存放在 GitHub，不太稳定。</p><p>你可以也通过执行下面的命令，高速安装 Docker Compose。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">\`</span></span>-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">\`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.授予docker-compose文件执行权限：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.创建软链：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/bin/docker-compose /usr/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>如果不执行这步，执行 <code>docker-compose --version</code> 会报如下错误：</p><p><code>-bash: /usr/bin/docker-compose: No such file or directory</code></p><p>要么就使用</p><p><code>sudo docker-compose --version</code></p></blockquote><blockquote><p>ln -s 作用</p><p><code>ln -s</code>命令用于创建符号链接（Symbolic Link），也称为软链接。符号链接是指向另一个文件或目录的特殊文件。当您通过符号链接访问目标文件时，实际上是通过符号链接跳转到目标文件。</p><p>具体地说，<code>ln -s</code>命令的作用是创建一个指向目标文件或目录的符号链接。</p><p><code>ln -s &lt;目标文件/目录&gt; &lt;符号链接路径&gt;</code></p></blockquote><p>4.验证Docker Compose是否成功安装。您可以运行以下命令来检查版本信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span>

如果您看到类似于<span class="token string">&quot;docker-compose version x.x.x&quot;</span>的输出，表示Docker Compose已成功安装。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考：</h2>`,15),T={href:"https://docs.docker.com/engine/install/ubuntu/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.runoob.com/docker/ubuntu-docker-install.html",target:"_blank",rel:"noopener noreferrer"};function $(G,j){const n=i("ExternalLinkIcon");return r(),d("div",null,[l,e("p",null,[e("a",p,[s("Ubuntu"),a(n)]),s(" 操作系统下载,最好选择最新LTS 版本。")]),u,e("p",null,[s("认情况下，"),b,s(" 命令会使用 "),e("a",v,[s("Unix socket"),a(n)]),s(" 与 Docker 引擎通讯。而只有 "),k,s(" 用户和 "),m,s(" 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 "),h,s(" 用户。因此，更好地做法是将需要使用 "),g,s(" 的用户加入 "),f,s(" 用户组。")]),_,e("p",null,[e("a",x,[s("Docker 镜像加速 | 菜鸟教程 (runoob.com)"),a(n)])]),q,e("p",null,[s("建议 "),y,s(),e("a",D,[s("镜像测试"),a(n)]),s(" 这个 GitHub 仓库，我们会在此更新各个镜像地址的状态。")]),w,L,e("p",null,[s("Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址："),e("a",S,[s("最新发行的版本地址"),a(n)]),s("。")]),U,e("p",null,[e("a",T,[s("Docker官网Ubuntu安装文档"),a(n)])]),e("p",null,[e("a",C,[s("Ubuntu Docker 安装 | 菜鸟教程 (runoob.com)"),a(n)])])])}const P=c(t,[["render",$],["__file","Ubuntu下安装Docker.html.vue"]]);export{P as default};
